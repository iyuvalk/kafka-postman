#!/bin/bash

FILE=$(realpath "$0")
FOLDER=$(dirname "$FILE")
VERSION=$(cat "$FOLDER/VERSION.json" | jq -r ".docker_image")
MAJOR=$(echo $VERSION | cut -d. -f1)
MINOR=$(echo $VERSION | cut -d. -f2)
REV=$(echo $VERSION | cut -d. -f3)
REV=$(( REV + 1 ))
DATE=$(date +%s)
NEW_VERSION="${MAJOR}.${MINOR}.${REV}.${DATE}"
MAX_RETRIES=10

cd "$FOLDER"

echo "+Updating version number..."
echo \
'//NOTE: This file is automatically generated by '"$FILE"'
package main

func GetMyVersion() string {
	return "v'"$NEW_VERSION"'"
}'>"version.go"

echo "+Trying to compile the code..."
if go build -o "$FOLDER/bin/kafka-postman/kafka-postman"; then
  echo "+Updating the version file..."
  cat "$FOLDER/VERSION.json" | jq '.docker_image |= "'"$NEW_VERSION"'"' > "$FOLDER/VERSION.json.tmp"
  mv "$FOLDER/VERSION.json.tmp" "$FOLDER/VERSION.json"

  echo "+Building the docker image of the current version and tagging it..."
  cd "$FOLDER/bin/kafka-postman"
  docker build . -t kafka-postman:$NEW_VERSION -t kafka-postman:latest

  # TODO: Loop over all the folders that start with test_* under the $FOLDER/tests folder and run, if exist the init.sh file, test.sh (if this doesn't exist, warn) and the cleanup.sh and abort if test.sh returned a non-zero response.
  echo "+Starting automated tests sequence..."
  [ -d "$FOLDER/tests" ] && cd "$FOLDER/tests" || echo "A tests folder could not be located. Cannot run automated tests"
  TEST_FOLDERS=$(find . -maxdepth 1 -type d -name "test_*")
  for test_folder in $TEST_FOLDERS; do
    FOLDER_NAME=$(basename "$test_folder")
    echo "Verifying that the test folder $test_folder is properly constructed..."
    TEST_FILES=$(find "$test_folder/" -maxdepth 1 -executable -type f -name "test*.sh")
    TEST_FILES_COUNT=$(echo -e "$TEST_FILES" | grep -v '^\s*$' | wc -l)
    if [ "$TEST_FILES_COUNT" -gt 0 ]; then
      echo "+It is. Running the init.sh script to prepare for the tests in the $test_folder folder..."
      if [ -x "$test_folder/init.sh" ]; then
        echo "+Initializing the test in the folder $test_folder..."
        "$test_folder/init.sh" "$test_folder" | sed -e 's/^/\['"$FOLDER_NAME"'\][INIT   ] /'
      fi
      for test_file in $TEST_FILES; do
        TEST_STATUS=9999
        RETRIES=$MAX_RETRIES
        while [ $TEST_STATUS -gt 0 ] && [ $RETRIES -gt 0 ]; do
          echo "+Running the test $test_file from folder $test_folder..."
          TEST_RES=$("$test_file" "$test_folder")
          TEST_STATUS=$?
          echo -e "$TEST_RES" | sed -e 's/^/\['"$FOLDER_NAME"'\][TEST   ] /'
          if [ $TEST_STATUS -eq 0 ]; then
            echo "+Test $test_file succeeded ($RETRIES retries left). Cleaning up and continuing..."
            break
          else
            if [ $RETRIES -gt 0 ]; then
              echo "+Test $test_folder FAILED ($RETRIES retries left). Retrying..."
            else
              echo "+Test $test_folder FAILED ($RETRIES retries left). Leaving everything UNCLEAN to help debug this... (You can clean it up by running \"$(realpath $test_folder)/cleanup.sh\" \"$(realpath $test_folder)\")"
              exit 9
            fi
          fi
          (( RETRIES-- ))
        done
      done
      if [ -x "$test_folder/cleanup.sh" ]; then
        echo "+Cleaning up the test resources for the test in folder $test_folder..."
        "$test_folder/cleanup.sh" "$test_folder" | sed -e 's/^/\['"$FOLDER_NAME"'\][CLEANUP] /'
        echo "+Waiting after cleanup for 10 seconds..."
        sleep 10s
      fi
    else
      echo "+WARN: Folder $test_folder does not contain any executable files named '"'test*.sh'"'. SKIPPING"
    fi
  done
  echo "+All tests ran successfully. Docker image at version $NEW_VERSION is available locally."
fi
